plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven'
}

archivesBaseName = 'boost-gradle-plugin'
group = 'io.openliberty.boost'
version = '0.1-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations {

}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

sourceSets {
    test {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

test {
    classpath = sourceSets.test.runtimeClasspath
}

dependencies {
    compile localGroovy()
    compile 'net.wasdev.wlp.common:ci.common:1.3'
    compile 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.5'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    testCompile 'junit:junit:4.12'
    testRuntime files(createClasspathManifest)
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar) {
    classifier = 'groovydoc'
    from groovydoc
}

artifacts {
    archives groovydocJar, sourcesJar
}

if (!version.endsWith("SNAPSHOT")) {
    signing {
        sign configurations.archives
    }
}

gradlePlugin {
    plugins {
        boostPlugin {
            id = 'io.openliberty.boost'
            implementationClass = 'io.openliberty.boost.liberty.Boost'
        }
    }
}